runif(1)        # Generate one random numbers between 0 and 1
runif(5)        # Generate five random numbers between 0 and 1
runif(5, min = 1, max = 5)    # Generate five random numbers between 1 and 5
N<-runif(5)
N
class(N)        # Type of Variable
min(N)          # Min
max(N)          # Max
sum(N)          # Sum
mean(N)         # Mean
sd(N)           # Standad Deviation
Actual <- runif(100, min = 1, max = 5)
Actual
head(Actual)
Predicted <- runif(100, min = 1, max = 5)
Predicted
head(Predicted)
Actual-Predicted            # Difference
sum(Actual-Predicted)       # sum
cat("\nSTART\n")
startTime = proc.time()[3]
startTime
cat("\nStep 1: Library Inclusion")
library(randomForest)
install.packages('randomForest')
library(randomForest)
library(randomForest)
cat("\nStep 2: Variable Declaration")
modelName <- "randomForest"
modelName
InputDataFileName="regressionDataSet.csv"
InputDataFileName
training = 50      # Defining Training Percentage; Testing = 100 - Training
cat("\nStep 3: Data Loading")
dataset <- read.csv(InputDataFileName)      # Read the datafile
getwd()
setwd("C:/Users/mayank jain/Desktop/Practical Session on R/Session II - Regression")
dataset <- read.csv(InputDataFileName)      # Read the datafile
dataset <- dataset[sample(nrow(dataset)),]  # Shuffle the data row wise.
head(dataset)   # Show Top 6 records
nrow(dataset)   # Show number of records
names(dataset)  # Show fields names or columns names
cat("\nStep 4: Counting dataset")
totalDataset <- nrow(dataset)
totalDataset
cat("\nStep 5: Choose Target Variable")
target  <- names(dataset)[1]   # i.e. RMSD
target
cat("\nStep 6: Choose Inputs Variable")
inputs <- setdiff(names(dataset),target)
inputs
length(inputs)
cat("\nStep 7: Select training dataset")
1:(totalDataset * training/100)
(totalDataset * training/100)
trainDataset <- dataset[1:(totalDataset * training/100),c(inputs, target)]
head(trainDataset)    # Show Top 6 records
nrow(trainDataset)    # Show number of train Dataset
cat("\nStep 8: Select testing dataset")
(totalDataset * training/100):totalDataset
testDataset <- dataset[(totalDataset * training/100):totalDataset,c(inputs, target)]
head(testDataset)
nrow(testDataset)
cat("\nStep 9: Model Building -> ", modelName)
formula <- as.formula(paste(target, "~", paste(c(inputs), collapse = "+")))
formula
model   <- randomForest(formula, trainDataset, ntree=500, mtry=2)
model
cat("\nStep 10: Prediction using -> ", modelName)
Predicted <- predict(model, testDataset)
head(Predicted)
cat("\nStep 11: Extracting Actual")
Actual <- as.double(unlist(testDataset[target]))
head(Actual)
cat("\nStep 12: Model Evaluation")
r <- cor(Actual,Predicted )
r <- round(r,2)
r
R <- r * r
R <- round(R,2)
R
rmse <- mean(abs(Actual-Predicted))
rmse <- round(rmse,2)
rmse
accuracy <- mean(abs(Actual-Predicted) <=1)
accuracy <- round(accuracy,4) *100
accuracy
accuracy <- mean(abs(Actual-Predicted) <=1)
accuracy <- round(accuracy,4) *100
accuracy
abs(Actual-Predicted) <=1
accuracy <- mean(abs(Actual-Predicted) <=1)
accuracy <- round(accuracy,4) *100
accuracy
accuracy <- mean(abs(Actual-Predicted) <=2)
accuracy <- round(accuracy,4) *100
accuracy
totalTime = proc.time()[3] - startTime
totalTime
png(filename=paste(modelName,"-ScatterPlot.png",sep=''))
plot(Actual,Predicted,main=paste("Actual Vs Predicted\n",modelName),xlab="Predicted", ylab="Actual")#, pch=19)
abline(lm(Actual ~ Predicted,),col="White")
dev.off()
result <- data.frame(modelName,r,R,rmse,accuracy, totalTime)[1:1,]
result
cat("\nStep 13: Writing to file")
write.csv(result, file=paste(modelName,"-Evaluation-Result.csv",sep=''), row.names=FALSE)
write.csv(data.frame(Actual,Predicted), file=paste(modelName,"-ActualPredicted-Result.csv",sep=''), row.names=FALSE)
cat("\nStep 14: Saving the Model ->",modelName)
save.image(file=paste(modelName,"-Model.RData",sep=''))
cat("\nDone")
cat("\nTotal Time Taken: ", totalTime," sec")
cat("\nStep 2: Variable Declaration")
modelFileName <- "randomForest-Model.RData"
cat("\nStep 3: Model Loading")
load(modelFileName)
cat("\nStep 4: Data Loading")
newTestDataset <- read.csv(testFileName)    # Read the datafile
setwd("C:/Users/mayank jain/Desktop/Practical Session on R/Session III - Testing of New DataSet")
setwd("C:/Users/mayank jain/Desktop/Practical Session on R/Session III - Testing of New DataSet")
head(newTestDataset)
head(newTestDataset)
cat("\nStep 4: Data Loading")
newTestDataset <- read.csv(testFileName)    # Read the datafile
newTestDataset <- read.csv(testFileName)    # Read the datafile
setwd("C:/Users/mayank jain/Desktop/Practical Session on R/Session III - Testing of New DataSet")
newTestDataset <- read.csv(testFileName)    # Read the datafile
head(newTestDataset)
cat("\nStep 5: Prediction using -> ", modelName)
NewPredicted <- predict(model, newTestDataset)
setwd("C:/Users/mayank jain/Desktop/Practical Session on R/Session III - Testing of New DataSet")
newTestDataset <- read.csv(testFileName)    # Read the datafile
cat("\nStep 4: Data Loading")
newTestDataset <- read.csv(testFileName)    # Read the datafile
modelFileName <- "randomForest-Model.RData"
testFileName  <-"testFile.csv"
cat("\nStep 3: Model Loading")
load(modelFileName)
cat("\nStep 4: Data Loading")
newTestDataset <- read.csv(testFileName)    # Read the datafile
head(newTestDataset)
cat("\nStep 5: Prediction using -> ", modelName)
NewPredicted <- predict(model, newTestDataset)
head(NewPredicted)
cat("\nStep 6: Saving Results")
write.csv(data.frame(newTestDataset,NewPredicted), file=paste(modelName,"-Testing-Result.csv",sep=''), row.names=FALSE)
cat("\nDone")
library(rpart)
cat("\nStep 2: Variable Declaration")
library(nnet)
###############################################################
#                                                             #
#            RandomForest model for Regression                #
#                                                             #
###############################################################
#                                                             #
# Credit: Dr. Prashant Singh Rana                             #
# Email : psrana@gmail.com                                    #
# Web   : www.psrana.com                                      #
#                                                             #
###############################################################
#                                                             #
# Train and Test randomForest model for Regression            #
#                                                             #
# This script do the following:                               #
# 1. Load the Data                                            #
# 2. Partition the data into Train/Test set                   #
# 3. Train the randomForest Model                             #
# 4. Test                                                     #
# 5. Evaluate on : Correlation, Regression, RMSE, Accuracy.   #
# 6. Finally Saving the results.                              #
#                                                             #
###############################################################
#--------------------------------------------------------------
# Step 0: Start; Getting the starting time
#--------------------------------------------------------------
cat("\nSTART\n")
startTime = proc.time()[3]
startTime
#--------------------------------------------------------------
# Step 1: Include Library
#--------------------------------------------------------------
cat("\nStep 1: Library Inclusion")
library(randomForest)
#--------------------------------------------------------------
# Step 2: Variable Declaration
#--------------------------------------------------------------
cat("\nStep 2: Variable Declaration")
modelName <- "randomForest"
modelName
InputDataFileName="regressionDataSet.csv"
InputDataFileName
training = 50      # Defining Training Percentage; Testing = 100 - Training
#--------------------------------------------------------------
# Step 3: Data Loading
#--------------------------------------------------------------
cat("\nStep 3: Data Loading")
dataset <- read.csv(InputDataFileName)      # Read the datafile
dataset <- dataset[sample(nrow(dataset)),]  # Shuffle the data row wise.
head(dataset)   # Show Top 6 records
nrow(dataset)   # Show number of records
names(dataset)  # Show fields names or columns names
#--------------------------------------------------------------
# Step 4: Count total number of observations/rows.
#--------------------------------------------------------------
cat("\nStep 4: Counting dataset")
totalDataset <- nrow(dataset)
totalDataset
#--------------------------------------------------------------
# Step 5: Choose Target variable
#--------------------------------------------------------------
cat("\nStep 5: Choose Target Variable")
target  <- names(dataset)[1]   # i.e. RMSD
target
#--------------------------------------------------------------
# Step 6: Choose inputs Variables
#--------------------------------------------------------------
cat("\nStep 6: Choose Inputs Variable")
inputs <- setdiff(names(dataset),target)
inputs
length(inputs)
#Feature Selection
#n=4
#inputs <-sample(inputs, n)
#--------------------------------------------------------------
# Step 7: Select Training Data Set
#--------------------------------------------------------------
cat("\nStep 7: Select training dataset")
trainDataset <- dataset[1:(totalDataset * training/100),c(inputs, target)]
head(trainDataset)    # Show Top 6 records
nrow(trainDataset)    # Show number of train Dataset
#--------------------------------------------------------------
# Step 8: Select Testing Data Set
#--------------------------------------------------------------
cat("\nStep 8: Select testing dataset")
testDataset <- dataset[(totalDataset * training/100):totalDataset,c(inputs, target)]
head(testDataset)
nrow(testDataset)
#--------------------------------------------------------------
# Step 9: Model Building (Training)
#--------------------------------------------------------------
cat("\nStep 9: Model Building -> ", modelName)
formula <- as.formula(paste(target, "~", paste(c(inputs), collapse = "+")))
formula
model   <- randomForest(formula, trainDataset, ntree=500, mtry=2)
model
#--------------------------------------------------------------
# Step 10: Prediction (Testing)
#--------------------------------------------------------------
cat("\nStep 10: Prediction using -> ", modelName)
Predicted <- predict(model, testDataset)
head(Predicted)
#--------------------------------------------------------------
# Step 11: Extracting Actual
#--------------------------------------------------------------
cat("\nStep 11: Extracting Actual")
Actual <- as.double(unlist(testDataset[target]))
head(Actual)
#--------------------------------------------------------------
# Step 12: Model Evaluation
#--------------------------------------------------------------
cat("\nStep 12: Model Evaluation")
# Step 12.1: Correlation
r <- cor(Actual,Predicted )
r <- round(r,2)
r
# Step 12.2: RSquare
R <- r * r
R <- round(R,2)
R
# Step 12.3: RMSE
rmse <- mean(abs(Actual-Predicted))
rmse <- round(rmse,2)
rmse
# Step 12.4: Accuracy
accuracy <- mean(abs(Actual-Predicted) <=2)
accuracy <- round(accuracy,4) *100
accuracy
# Step 12.5: Total Time
totalTime = proc.time()[3] - startTime
totalTime
# Step 12.6: Scatter Plot
png(filename=paste(modelName,"-ScatterPlot.png",sep=''))
plot(Actual,Predicted,main=paste("Actual Vs Predicted\n",modelName),xlab="Predicted", ylab="Actual")#, pch=19)
abline(lm(Actual ~ Predicted,),col="White")
dev.off()
# Step 12.7: Save evaluation resut
result <- data.frame(modelName,r,R,rmse,accuracy, totalTime)[1:1,]
result
#--------------------------------------------------------------
# Step 13: Writing to file
#--------------------------------------------------------------
cat("\nStep 13: Writing to file")
# Step 13.1: Writing to file (evaluation result)
write.csv(result, file=paste(modelName,"-Evaluation-Result.csv",sep=''), row.names=FALSE)
# Step 13.2: Writing to file (Actual and Predicted)
write.csv(data.frame(Actual,Predicted), file=paste(modelName,"-ActualPredicted-Result.csv",sep=''), row.names=FALSE)
#--------------------------------------------------------------
# Step 14: Saving the Model
#--------------------------------------------------------------
cat("\nStep 14: Saving the Model ->",modelName)
save.image(file=paste(modelName,"-Model.RData",sep=''))
cat("\nDone")
cat("\nTotal Time Taken: ", totalTime," sec")
#--------------------------------------------------------------
#                           END
#--------------------------------------------------------------
startTime = proc.time()[3]
startTime
cat("\nStep 1: Library Inclusion")
library(randomForest)
cat("\nStep 2: Variable Declaration")
modelName <- "randomForest"
modelName
InputDataFileName="regressionDataSet.csv"
InputDataFileName
training = 50      # Defining Training Percentage; Testing = 100 - Training
cat("\nStep 3: Data Loading")
dataset <- read.csv(InputDataFileName)      # Read the datafile
setwd("C:/Users/mayank jain/Desktop/Practical Session on R/Session II - Regression")
dataset <- dataset[sample(nrow(dataset)),]  # Shuffle the data row wise.
dataset <- read.csv(InputDataFileName)      # Read the datafile
dataset <- dataset[sample(nrow(dataset)),]  # Shuffle the data row wise.
head(dataset)   # Show Top 6 records
nrow(dataset)   # Show number of records
names(dataset)  # Show fields names or columns names
cat("\nStep 4: Counting dataset")
totalDataset <- nrow(dataset)
totalDataset
cat("\nStep 5: Choose Target Variable")
target  <- names(dataset)[1]   # i.e. RMSD
target
cat("\nStep 6: Choose Inputs Variable")
inputs <- setdiff(names(dataset),target)
inputs
length(inputs)
cat("\nStep 7: Select training dataset")
trainDataset <- dataset[1:(totalDataset * training/100),c(inputs, target)]
head(trainDataset)    # Show Top 6 records
nrow(trainDataset)    # Show number of train Dataset
cat("\nStep 8: Select testing dataset")
testDataset <- dataset[(totalDataset * training/100):totalDataset,c(inputs, target)]
head(testDataset)
nrow(testDataset)
cat("\nStep 9: Model Building -> ", modelName)
formula <- as.formula(paste(target, "~", paste(c(inputs), collapse = "+")))
formula
model   <- randomForest(formula, trainDataset, ntree=500, mtry=2)
model
cat("\nStep 10: Prediction using -> ", modelName)
Predicted <- predict(model, testDataset)
head(Predicted)
cat("\nStep 11: Extracting Actual")
Actual <- as.double(unlist(testDataset[target]))
head(Actual)
cat("\nStep 12: Model Evaluation")
r <- cor(Actual,Predicted )
r <- round(r,2)
r
R <- r * r
R <- round(R,2)
R
rmse <- mean(abs(Actual-Predicted))
rmse <- round(rmse,2)
rmse
accuracy <- mean(abs(Actual-Predicted) <=1)
accuracy <- round(accuracy,4) *100
accuracy
totalTime = proc.time()[3] - startTime
totalTime
png(filename=paste(modelName,"-ScatterPlot.png",sep=''))
plot(Actual,Predicted,main=paste("Actual Vs Predicted\n",modelName),xlab="Predicted", ylab="Actual")#, pch=19)
abline(lm(Actual ~ Predicted,),col="White")
dev.off()
result <- data.frame(modelName,r,R,rmse,accuracy, totalTime)[1:1,]
result
cat("\nStep 13: Writing to file")
write.csv(result, file=paste(modelName,"-Evaluation-Result.csv",sep=''), row.names=FALSE)
write.csv(data.frame(Actual,Predicted), file=paste(modelName,"-ActualPredicted-Result.csv",sep=''), row.names=FALSE)
cat("\nStep 14: Saving the Model ->",modelName)
save.image(file=paste(modelName,"-Model.RData",sep=''))
cat("\nDone")
cat("\nTotal Time Taken: ", totalTime," sec")
modelFileName <- "randomForest-Model.RData"
testFileName  <-"testFile.csv"
cat("\nStep 3: Model Loading")
load(modelFileName)
cat("\nStep 4: Data Loading")
newTestDataset <- read.csv(testFileName)    # Read the datafile
setwd("C:/Users/mayank jain/Desktop/Practical Session on R/Session III - Testing of New DataSet")
newTestDataset <- read.csv(testFileName)    # Read the datafile
head(newTestDataset)
3#--------------------------------------------------------------
cat("\nStep 5: Prediction using -> ", modelName)
NewPredicted <- predict(model, newTestDataset)
head(NewPredicted)
cat("\nStep 6: Saving Results")
write.csv(data.frame(newTestDataset,NewPredicted), file=paste(modelName,"-Testing-Result.csv",sep=''), row.names=FALSE)
cat("\nDone")
directory = getwd()
directory
setwd("C:/Users/mayan/Desktop/projects/estimator")
directory = getwd()
directory
library(randomForest)
cat("\nStep 2: Variable Declaration")
modelFileName <- "randomForest-Model.RData"
directory1 = "C:/Users/mayan/Desktop/projects/estimator/media/documents"
directory1
args = commandArgs(trailingOnly=TRUE)
directory = getwd()
directory
library(randomForest)
cat("\nStep 2: Variable Declaration")
modelFileName <- "randomForest-Model.RData"
directory1 = "C:/Users/mayan/Desktop/projects/estimator/media/documents"
directory1
InputDataFileName="cartestfile.csv"
training = as.integer(args[2])     # Defining Training Percentage; Testing = 100 - Training
filepath <- file.path(directory1,InputDataFileName)
filepath
cat("\nStep 3: Model Loading")
load(modelFileName)
cat("\nStep 4: Data Loading")
newTestDataset <- read.csv(filepath)    # Read the datafile
setwd("C:/Users/mayan/Desktop/projects/estimator")
newTestDataset <- read.csv(filepath)    # Read the datafile
args = commandArgs(trailingOnly=TRUE)
directory = getwd()
directory
library(randomForest)
cat("\nStep 2: Variable Declaration")
modelFileName <- "randomForest-Model.RData"
directory1 = "C:/Users/mayan/Desktop/projects/estimator/media/documents"
directory1
InputDataFileName="cartestfile.csv"
training = as.integer(args[2])     # Defining Training Percentage; Testing = 100 - Training
filepath <- file.path(directory1,InputDataFileName)
filepath
cat("\nStep 3: Model Loading")
load(modelFileName)
args = commandArgs(trailingOnly=TRUE)
directory = getwd()
directory
library(randomForest)
cat("\nStep 2: Variable Declaration")
modelFileName <- "randomForest-Model.RData"
directory1 = "C:/Users/mayan/Desktop/projects/estimator/media/documents"
directory1
cat("\nStep 3: Model Loading")
load(modelFileName)
InputDataFileName="cartestfile.csv"
training = as.integer(args[2])     # Defining Training Percentage; Testing = 100 - Training
filepath <- file.path(directory1,InputDataFileName)
filepath
cat("\nStep 4: Data Loading")
newTestDataset <- read.csv(filepath)    # Read the datafile
head(newTestDataset)
cat("\nStep 5: Prediction using -> ", modelName)
NewPredicted <- predict(model, newTestDataset)
head(NewPredicted)
cat("\nStep 6: Saving Results")
write.csv(data.frame(newTestDataset,NewPredicted), file=paste(modelName,"-Testing-Result.csv",sep=''), row.names=FALSE)
cat("\nDone")
